#!/usr/bin/env bash

set -euExo pipefail
shopt -s inherit_errexit

function get-url {
  echo "https://go.dev/dl/go${1}.linux-${2}.tar.gz"
}

function get-latest-version {
  echo "${1}" | jq -r '.[] | select( .version | test("'"${2}"'") ) | .version | sub("^go"; "")'
}

function store-versions {
  output_file=${1}
  go_version=${2}
  golangci_lint_version=${3}
  cat <<EOF > ${output_file}
# This file is auto-generated by golang/update.sh
GOLANG_VERSION="${go_version}"
GOLANGCI_LINT_VERSION="${golangci_lint_version}"
EOF
}

# Resolve golangci-lint version (the same version is used for all Golang versions).
golangci_lint_version="$( curl --fail --retry 5 --retry-all-errors -L https://api.github.com/repos/golangci/golangci-lint/releases/latest | jq -r '.tag_name' )"
golangci_lint_semver="${golangci_lint_version#v}"

for version_regex in 'go1\\.23($|\\.[0-9]+)' 'go1\\.24($|\\.[0-9]+)'; do
  # Resolve golang version.
  version_info="$( curl --fail --retry 5 --retry-all-errors -L  https://go.dev/dl/?mode=json )"
  version=$( get-latest-version "${version_info}" "${version_regex}" )
  short_version="${version%.*}"

  # Cleanup old checksums.
  find "${short_version}/checksums" -name '*.sum' -delete

  # Store the versions file for this golang version.
  store-versions "${short_version}/versions.sh" "${version}" "${golangci_lint_semver}"

  for architecture in 'amd64' 'arm64' ; do
    # Dump golang archive checksum.
    url="$( get-url "${version}" "${architecture}" )"
    curl --fail --retry 5 --retry-all-errors -L "${url}" | sha512sum > "${short_version}/checksums/${url##*/}.sum"

    # Dump golangci-lint archive checksum.
    golangci_lint_url="https://github.com/golangci/golangci-lint/releases/download/v${golangci_lint_semver}/golangci-lint-${golangci_lint_semver}-linux-${architecture}.tar.gz"
    curl --fail --retry 5 --retry-all-errors -L "${golangci_lint_url}" | sha512sum > "${short_version}/checksums/golangci-lint-${golangci_lint_semver}-linux-${architecture}.tar.gz.sum"
  done
done
